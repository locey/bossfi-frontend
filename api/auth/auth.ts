/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * BossFi Backend API
 * BossFi区块链后端API服务，支持钱包登录、用户管理、区块链数据同步等功能
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ControllersGetNonceRequest,
  ControllersGetNonceResponse,
  ControllersLoginRequest,
  ControllersLoginResponse,
  ControllersTestTokenRequest,
  ControllersTestTokenResponse,
  GetAuthProfile200,
  GetAuthProfile401,
  GetAuthProfile404,
  GetAuthProfile500,
  PostAuthLogin400,
  PostAuthLogin401,
  PostAuthLogin500,
  PostAuthLogout200,
  PostAuthLogout401,
  PostAuthLogout500,
  PostAuthNonce400,
  PostAuthNonce500,
  PostAuthTestToken400,
  PostAuthTestToken500
} from '.././model';

import { axiosInstance } from '../../utils/request';
import type { ErrorType } from '../../utils/request';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 使用钱包签名进行登录验证，验证成功后返回JWT令牌
 * @summary 钱包签名登录
 */
export const postAuthLogin = (
    controllersLoginRequest: ControllersLoginRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ControllersLoginResponse>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: controllersLoginRequest, signal
    },
      options);
    }
  


export const getPostAuthLoginMutationOptions = <TError = ErrorType<PostAuthLogin400 | PostAuthLogin401 | PostAuthLogin500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: ControllersLoginRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: ControllersLoginRequest}, TContext> => {

const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: ControllersLoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLogin(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = ControllersLoginRequest
    export type PostAuthLoginMutationError = ErrorType<PostAuthLogin400 | PostAuthLogin401 | PostAuthLogin500>

    /**
 * @summary 钱包签名登录
 */
export const usePostAuthLogin = <TError = ErrorType<PostAuthLogin400 | PostAuthLogin401 | PostAuthLogin500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: ControllersLoginRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: ControllersLoginRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 用户登出，清除服务器端会话信息
 * @summary 用户登出
 */
export const postAuthLogout = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<PostAuthLogout200>(
      {url: `/auth/logout`, method: 'POST', signal
    },
      options);
    }
  


export const getPostAuthLogoutMutationOptions = <TError = ErrorType<PostAuthLogout401 | PostAuthLogout500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext> => {

const mutationKey = ['postAuthLogout'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogout>>, void> = () => {
          

          return  postAuthLogout(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogout>>>
    
    export type PostAuthLogoutMutationError = ErrorType<PostAuthLogout401 | PostAuthLogout500>

    /**
 * @summary 用户登出
 */
export const usePostAuthLogout = <TError = ErrorType<PostAuthLogout401 | PostAuthLogout500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostAuthLogoutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 前端调用此接口获取需要签名的消息和 nonce，用于钱包登录
 * @summary 获取用于钱包签名的消息和 nonce
 */
export const postAuthNonce = (
    controllersGetNonceRequest: ControllersGetNonceRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ControllersGetNonceResponse>(
      {url: `/auth/nonce`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: controllersGetNonceRequest, signal
    },
      options);
    }
  


export const getPostAuthNonceMutationOptions = <TError = ErrorType<PostAuthNonce400 | PostAuthNonce500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthNonce>>, TError,{data: ControllersGetNonceRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthNonce>>, TError,{data: ControllersGetNonceRequest}, TContext> => {

const mutationKey = ['postAuthNonce'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthNonce>>, {data: ControllersGetNonceRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthNonce(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthNonceMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthNonce>>>
    export type PostAuthNonceMutationBody = ControllersGetNonceRequest
    export type PostAuthNonceMutationError = ErrorType<PostAuthNonce400 | PostAuthNonce500>

    /**
 * @summary 获取用于钱包签名的消息和 nonce
 */
export const usePostAuthNonce = <TError = ErrorType<PostAuthNonce400 | PostAuthNonce500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthNonce>>, TError,{data: ControllersGetNonceRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthNonce>>,
        TError,
        {data: ControllersGetNonceRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthNonceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 获取当前登录用户的详细个人信息
 * @summary 获取用户个人信息
 */
export const getAuthProfile = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<GetAuthProfile200>(
      {url: `/auth/profile`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthProfileQueryKey = () => {
    return [`/auth/profile`] as const;
    }

    
export const getGetAuthProfileQueryOptions = <TData = Awaited<ReturnType<typeof getAuthProfile>>, TError = ErrorType<GetAuthProfile401 | GetAuthProfile404 | GetAuthProfile500>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProfile>>> = ({ signal }) => getAuthProfile(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProfile>>>
export type GetAuthProfileQueryError = ErrorType<GetAuthProfile401 | GetAuthProfile404 | GetAuthProfile500>


export function useGetAuthProfile<TData = Awaited<ReturnType<typeof getAuthProfile>>, TError = ErrorType<GetAuthProfile401 | GetAuthProfile404 | GetAuthProfile500>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthProfile>>,
          TError,
          Awaited<ReturnType<typeof getAuthProfile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthProfile<TData = Awaited<ReturnType<typeof getAuthProfile>>, TError = ErrorType<GetAuthProfile401 | GetAuthProfile404 | GetAuthProfile500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthProfile>>,
          TError,
          Awaited<ReturnType<typeof getAuthProfile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthProfile<TData = Awaited<ReturnType<typeof getAuthProfile>>, TError = ErrorType<GetAuthProfile401 | GetAuthProfile404 | GetAuthProfile500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 获取用户个人信息
 */

export function useGetAuthProfile<TData = Awaited<ReturnType<typeof getAuthProfile>>, TError = ErrorType<GetAuthProfile401 | GetAuthProfile404 | GetAuthProfile500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthProfileQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 直接获取JWT token用于API测试，仅限开发环境使用
 * @summary 获取测试用token
 */
export const postAuthTestToken = (
    controllersTestTokenRequest: ControllersTestTokenRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ControllersTestTokenResponse>(
      {url: `/auth/test-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: controllersTestTokenRequest, signal
    },
      options);
    }
  


export const getPostAuthTestTokenMutationOptions = <TError = ErrorType<PostAuthTestToken400 | PostAuthTestToken500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthTestToken>>, TError,{data: ControllersTestTokenRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthTestToken>>, TError,{data: ControllersTestTokenRequest}, TContext> => {

const mutationKey = ['postAuthTestToken'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthTestToken>>, {data: ControllersTestTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthTestToken(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthTestTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthTestToken>>>
    export type PostAuthTestTokenMutationBody = ControllersTestTokenRequest
    export type PostAuthTestTokenMutationError = ErrorType<PostAuthTestToken400 | PostAuthTestToken500>

    /**
 * @summary 获取测试用token
 */
export const usePostAuthTestToken = <TError = ErrorType<PostAuthTestToken400 | PostAuthTestToken500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthTestToken>>, TError,{data: ControllersTestTokenRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthTestToken>>,
        TError,
        {data: ControllersTestTokenRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthTestTokenMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    