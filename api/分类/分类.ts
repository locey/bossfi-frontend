/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * BossFi Backend API
 * BossFi区块链后端API服务，支持钱包登录、用户管理、区块链数据同步等功能
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DeleteCategoriesId200,
  DeleteCategoriesId400,
  DeleteCategoriesId401,
  DeleteCategoriesId404,
  DeleteCategoriesId500,
  DtoCategoryListResponse,
  DtoCategoryResponse,
  DtoCreateCategoryRequest,
  DtoUpdateCategoryRequest,
  GetCategories400,
  GetCategories500,
  GetCategoriesActive500,
  GetCategoriesId404,
  GetCategoriesId500,
  GetCategoriesParams,
  PostCategories400,
  PostCategories401,
  PostCategories500,
  PutCategoriesId400,
  PutCategoriesId401,
  PutCategoriesId404,
  PutCategoriesId500
} from '.././model';

import { axiosInstance } from '../../utils/request';
import type { ErrorType } from '../../utils/request';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 分页获取分类列表
 * @summary 获取分类列表
 */
export const getCategories = (
    params?: GetCategoriesParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DtoCategoryListResponse>(
      {url: `/categories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCategoriesQueryKey = (params?: GetCategoriesParams,) => {
    return [`/categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getCategories>>, TError = ErrorType<GetCategories400 | GetCategories500>>(params?: GetCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategories>>> = ({ signal }) => getCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getCategories>>>
export type GetCategoriesQueryError = ErrorType<GetCategories400 | GetCategories500>


export function useGetCategories<TData = Awaited<ReturnType<typeof getCategories>>, TError = ErrorType<GetCategories400 | GetCategories500>>(
 params: undefined |  GetCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategories>>,
          TError,
          Awaited<ReturnType<typeof getCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategories<TData = Awaited<ReturnType<typeof getCategories>>, TError = ErrorType<GetCategories400 | GetCategories500>>(
 params?: GetCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategories>>,
          TError,
          Awaited<ReturnType<typeof getCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategories<TData = Awaited<ReturnType<typeof getCategories>>, TError = ErrorType<GetCategories400 | GetCategories500>>(
 params?: GetCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 获取分类列表
 */

export function useGetCategories<TData = Awaited<ReturnType<typeof getCategories>>, TError = ErrorType<GetCategories400 | GetCategories500>>(
 params?: GetCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 创建新的文章分类
 * @summary 创建分类
 */
export const postCategories = (
    dtoCreateCategoryRequest: DtoCreateCategoryRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DtoCategoryResponse>(
      {url: `/categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dtoCreateCategoryRequest, signal
    },
      options);
    }
  


export const getPostCategoriesMutationOptions = <TError = ErrorType<PostCategories400 | PostCategories401 | PostCategories500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCategories>>, TError,{data: DtoCreateCategoryRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postCategories>>, TError,{data: DtoCreateCategoryRequest}, TContext> => {

const mutationKey = ['postCategories'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCategories>>, {data: DtoCreateCategoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  postCategories(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postCategories>>>
    export type PostCategoriesMutationBody = DtoCreateCategoryRequest
    export type PostCategoriesMutationError = ErrorType<PostCategories400 | PostCategories401 | PostCategories500>

    /**
 * @summary 创建分类
 */
export const usePostCategories = <TError = ErrorType<PostCategories400 | PostCategories401 | PostCategories500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCategories>>, TError,{data: DtoCreateCategoryRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postCategories>>,
        TError,
        {data: DtoCreateCategoryRequest},
        TContext
      > => {

      const mutationOptions = getPostCategoriesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 获取所有活跃的分类列表（用于前端下拉选择）
 * @summary 获取所有活跃分类
 */
export const getCategoriesActive = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DtoCategoryListResponse>(
      {url: `/categories/active`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCategoriesActiveQueryKey = () => {
    return [`/categories/active`] as const;
    }

    
export const getGetCategoriesActiveQueryOptions = <TData = Awaited<ReturnType<typeof getCategoriesActive>>, TError = ErrorType<GetCategoriesActive500>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesActive>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoriesActiveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoriesActive>>> = ({ signal }) => getCategoriesActive(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategoriesActive>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCategoriesActiveQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoriesActive>>>
export type GetCategoriesActiveQueryError = ErrorType<GetCategoriesActive500>


export function useGetCategoriesActive<TData = Awaited<ReturnType<typeof getCategoriesActive>>, TError = ErrorType<GetCategoriesActive500>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesActive>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesActive>>,
          TError,
          Awaited<ReturnType<typeof getCategoriesActive>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoriesActive<TData = Awaited<ReturnType<typeof getCategoriesActive>>, TError = ErrorType<GetCategoriesActive500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesActive>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesActive>>,
          TError,
          Awaited<ReturnType<typeof getCategoriesActive>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoriesActive<TData = Awaited<ReturnType<typeof getCategoriesActive>>, TError = ErrorType<GetCategoriesActive500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesActive>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 获取所有活跃分类
 */

export function useGetCategoriesActive<TData = Awaited<ReturnType<typeof getCategoriesActive>>, TError = ErrorType<GetCategoriesActive500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesActive>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCategoriesActiveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 根据分类ID获取分类详细信息
 * @summary 获取分类详情
 */
export const getCategoriesId = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DtoCategoryResponse>(
      {url: `/categories/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCategoriesIdQueryKey = (id: number,) => {
    return [`/categories/${id}`] as const;
    }

    
export const getGetCategoriesIdQueryOptions = <TData = Awaited<ReturnType<typeof getCategoriesId>>, TError = ErrorType<GetCategoriesId404 | GetCategoriesId500>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoriesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoriesId>>> = ({ signal }) => getCategoriesId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCategoriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoriesId>>>
export type GetCategoriesIdQueryError = ErrorType<GetCategoriesId404 | GetCategoriesId500>


export function useGetCategoriesId<TData = Awaited<ReturnType<typeof getCategoriesId>>, TError = ErrorType<GetCategoriesId404 | GetCategoriesId500>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesId>>,
          TError,
          Awaited<ReturnType<typeof getCategoriesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoriesId<TData = Awaited<ReturnType<typeof getCategoriesId>>, TError = ErrorType<GetCategoriesId404 | GetCategoriesId500>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesId>>,
          TError,
          Awaited<ReturnType<typeof getCategoriesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoriesId<TData = Awaited<ReturnType<typeof getCategoriesId>>, TError = ErrorType<GetCategoriesId404 | GetCategoriesId500>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 获取分类详情
 */

export function useGetCategoriesId<TData = Awaited<ReturnType<typeof getCategoriesId>>, TError = ErrorType<GetCategoriesId404 | GetCategoriesId500>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCategoriesIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 更新分类信息
 * @summary 更新分类
 */
export const putCategoriesId = (
    id: number,
    dtoUpdateCategoryRequest: DtoUpdateCategoryRequest,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<DtoCategoryResponse>(
      {url: `/categories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dtoUpdateCategoryRequest
    },
      options);
    }
  


export const getPutCategoriesIdMutationOptions = <TError = ErrorType<PutCategoriesId400 | PutCategoriesId401 | PutCategoriesId404 | PutCategoriesId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCategoriesId>>, TError,{id: number;data: DtoUpdateCategoryRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putCategoriesId>>, TError,{id: number;data: DtoUpdateCategoryRequest}, TContext> => {

const mutationKey = ['putCategoriesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCategoriesId>>, {id: number;data: DtoUpdateCategoryRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putCategoriesId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCategoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putCategoriesId>>>
    export type PutCategoriesIdMutationBody = DtoUpdateCategoryRequest
    export type PutCategoriesIdMutationError = ErrorType<PutCategoriesId400 | PutCategoriesId401 | PutCategoriesId404 | PutCategoriesId500>

    /**
 * @summary 更新分类
 */
export const usePutCategoriesId = <TError = ErrorType<PutCategoriesId400 | PutCategoriesId401 | PutCategoriesId404 | PutCategoriesId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCategoriesId>>, TError,{id: number;data: DtoUpdateCategoryRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putCategoriesId>>,
        TError,
        {id: number;data: DtoUpdateCategoryRequest},
        TContext
      > => {

      const mutationOptions = getPutCategoriesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 删除分类（只能删除没有文章的分类）
 * @summary 删除分类
 */
export const deleteCategoriesId = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<DeleteCategoriesId200>(
      {url: `/categories/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCategoriesIdMutationOptions = <TError = ErrorType<DeleteCategoriesId400 | DeleteCategoriesId401 | DeleteCategoriesId404 | DeleteCategoriesId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCategoriesId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCategoriesId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteCategoriesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCategoriesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCategoriesId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCategoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCategoriesId>>>
    
    export type DeleteCategoriesIdMutationError = ErrorType<DeleteCategoriesId400 | DeleteCategoriesId401 | DeleteCategoriesId404 | DeleteCategoriesId500>

    /**
 * @summary 删除分类
 */
export const useDeleteCategoriesId = <TError = ErrorType<DeleteCategoriesId400 | DeleteCategoriesId401 | DeleteCategoriesId404 | DeleteCategoriesId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCategoriesId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCategoriesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCategoriesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    