/* tslint:disable */
/* eslint-disable */
/**
 * BossFi Backend API
 * BossFi区块链后端API服务，支持钱包登录、用户管理、区块链数据同步等功能
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@bossfi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ControllersGetNonceRequest
 */
export interface ControllersGetNonceRequest {
    /**
     * 
     * @type {string}
     * @memberof ControllersGetNonceRequest
     */
    'wallet_address': string;
}
/**
 * 
 * @export
 * @interface ControllersGetNonceResponse
 */
export interface ControllersGetNonceResponse {
    /**
     * 
     * @type {string}
     * @memberof ControllersGetNonceResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllersGetNonceResponse
     */
    'nonce'?: string;
}
/**
 * 
 * @export
 * @interface ControllersLoginRequest
 */
export interface ControllersLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof ControllersLoginRequest
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ControllersLoginRequest
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof ControllersLoginRequest
     */
    'wallet_address': string;
}
/**
 * 
 * @export
 * @interface ControllersLoginResponse
 */
export interface ControllersLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof ControllersLoginResponse
     */
    'token'?: string;
    /**
     * 
     * @type {object}
     * @memberof ControllersLoginResponse
     */
    'user'?: object;
}
/**
 * 
 * @export
 * @interface ControllersTestTokenRequest
 */
export interface ControllersTestTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof ControllersTestTokenRequest
     */
    'wallet_address': string;
}
/**
 * 
 * @export
 * @interface ControllersTestTokenResponse
 */
export interface ControllersTestTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof ControllersTestTokenResponse
     */
    'token'?: string;
    /**
     * 
     * @type {object}
     * @memberof ControllersTestTokenResponse
     */
    'user'?: object;
}
/**
 * 
 * @export
 * @interface DtoArticleListResponse
 */
export interface DtoArticleListResponse {
    /**
     * 
     * @type {Array<DtoArticleResponse>}
     * @memberof DtoArticleListResponse
     */
    'articles'?: Array<DtoArticleResponse>;
    /**
     * 
     * @type {number}
     * @memberof DtoArticleListResponse
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof DtoArticleListResponse
     */
    'page_size'?: number;
    /**
     * 
     * @type {number}
     * @memberof DtoArticleListResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface DtoArticleResponse
 */
export interface DtoArticleResponse {
    /**
     * 
     * @type {number}
     * @memberof DtoArticleResponse
     */
    'comment_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof DtoArticleResponse
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtoArticleResponse
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof DtoArticleResponse
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DtoArticleResponse
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof DtoArticleResponse
     */
    'is_deleted'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DtoArticleResponse
     */
    'like_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof DtoArticleResponse
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtoArticleResponse
     */
    'updated_at'?: string;
    /**
     * 关联数据
     * @type {DtoUserInfo}
     * @memberof DtoArticleResponse
     */
    'user'?: DtoUserInfo;
    /**
     * 
     * @type {number}
     * @memberof DtoArticleResponse
     */
    'user_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DtoArticleResponse
     */
    'view_count'?: number;
}
/**
 * 评论列表的响应数据结构
 * @export
 * @interface DtoCommentListResponse
 */
export interface DtoCommentListResponse {
    /**
     * 评论列表
     * @type {Array<DtoCommentResponse>}
     * @memberof DtoCommentListResponse
     */
    'comments'?: Array<DtoCommentResponse>;
    /**
     * 当前页码
     * @type {number}
     * @memberof DtoCommentListResponse
     */
    'page'?: number;
    /**
     * 每页数量
     * @type {number}
     * @memberof DtoCommentListResponse
     */
    'page_size'?: number;
    /**
     * 总评论数
     * @type {number}
     * @memberof DtoCommentListResponse
     */
    'total'?: number;
}
/**
 * 评论的响应数据结构
 * @export
 * @interface DtoCommentResponse
 */
export interface DtoCommentResponse {
    /**
     * 文章ID
     * @type {number}
     * @memberof DtoCommentResponse
     */
    'article_id'?: number;
    /**
     * 评论内容
     * @type {string}
     * @memberof DtoCommentResponse
     */
    'content'?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof DtoCommentResponse
     */
    'created_at'?: string;
    /**
     * 评论ID
     * @type {number}
     * @memberof DtoCommentResponse
     */
    'id'?: number;
    /**
     * 是否已删除
     * @type {boolean}
     * @memberof DtoCommentResponse
     */
    'is_deleted'?: boolean;
    /**
     * 点赞数
     * @type {number}
     * @memberof DtoCommentResponse
     */
    'like_count'?: number;
    /**
     * 父评论ID
     * @type {number}
     * @memberof DtoCommentResponse
     */
    'parent_id'?: number;
    /**
     * 回复列表
     * @type {Array<DtoCommentResponse>}
     * @memberof DtoCommentResponse
     */
    'replies'?: Array<DtoCommentResponse>;
    /**
     * 关联数据
     * @type {DtoUserInfo}
     * @memberof DtoCommentResponse
     */
    'user'?: DtoUserInfo;
    /**
     * 用户ID
     * @type {number}
     * @memberof DtoCommentResponse
     */
    'user_id'?: number;
}
/**
 * 
 * @export
 * @interface DtoCreateArticleRequest
 */
export interface DtoCreateArticleRequest {
    /**
     * 
     * @type {string}
     * @memberof DtoCreateArticleRequest
     */
    'content': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DtoCreateArticleRequest
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DtoCreateArticleRequest
     */
    'title': string;
}
/**
 * 创建评论的请求参数
 * @export
 * @interface DtoCreateCommentRequest
 */
export interface DtoCreateCommentRequest {
    /**
     * 文章ID
     * @type {number}
     * @memberof DtoCreateCommentRequest
     */
    'article_id': number;
    /**
     * 评论内容
     * @type {string}
     * @memberof DtoCreateCommentRequest
     */
    'content': string;
    /**
     * 父评论ID，用于回复
     * @type {number}
     * @memberof DtoCreateCommentRequest
     */
    'parent_id'?: number;
}
/**
 * 
 * @export
 * @interface DtoUpdateArticleRequest
 */
export interface DtoUpdateArticleRequest {
    /**
     * 
     * @type {string}
     * @memberof DtoUpdateArticleRequest
     */
    'content': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DtoUpdateArticleRequest
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DtoUpdateArticleRequest
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface DtoUserInfo
 */
export interface DtoUserInfo {
    /**
     * 
     * @type {string}
     * @memberof DtoUserInfo
     */
    'avatar'?: string;
    /**
     * 
     * @type {number}
     * @memberof DtoUserInfo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DtoUserInfo
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtoUserInfo
     */
    'wallet_address'?: string;
}
/**
 * 
 * @export
 * @interface RoutesHealthResponse
 */
export interface RoutesHealthResponse {
    /**
     * 
     * @type {string}
     * @memberof RoutesHealthResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoutesHealthResponse
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RoutesHealthResponse
     */
    'system'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof RoutesHealthResponse
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoutesHealthResponse
     */
    'trace_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoutesHealthResponse
     */
    'uptime'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoutesHealthResponse
     */
    'version'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 分页获取文章列表，支持排序和筛选
         * @summary 获取文章列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {ArticlesGetSortByEnum} [sortBy] 排序字段
         * @param {ArticlesGetSortOrderEnum} [sortOrder] 排序方向
         * @param {number} [userId] 用户ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesGet: async (page?: number, pageSize?: number, sortBy?: ArticlesGetSortByEnum, sortOrder?: ArticlesGetSortOrderEnum, userId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除文章（逻辑删除）
         * @summary 删除文章
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('articlesIdDelete', 'id', id)
            const localVarPath = `/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据文章ID获取文章详细信息
         * @summary 获取文章详情
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('articlesIdGet', 'id', id)
            const localVarPath = `/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 给文章点赞
         * @summary 点赞文章
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesIdLikePost: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('articlesIdLikePost', 'id', id)
            const localVarPath = `/articles/{id}/like`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新文章内容
         * @summary 更新文章
         * @param {number} id 文章ID
         * @param {DtoUpdateArticleRequest} request 更新文章信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesIdPut: async (id: number, request: DtoUpdateArticleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('articlesIdPut', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('articlesIdPut', 'request', request)
            const localVarPath = `/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 取消文章点赞
         * @summary 取消点赞文章
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesIdUnlikeDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('articlesIdUnlikeDelete', 'id', id)
            const localVarPath = `/articles/{id}/unlike`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建一篇新文章
         * @summary 创建文章
         * @param {DtoCreateArticleRequest} request 创建文章信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesPost: async (request: DtoCreateArticleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('articlesPost', 'request', request)
            const localVarPath = `/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 使用钱包签名进行登录验证，验证成功后返回JWT令牌
         * @summary 钱包签名登录
         * @param {ControllersLoginRequest} request 登录信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (request: ControllersLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('authLoginPost', 'request', request)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 用户登出，清除服务器端会话信息
         * @summary 用户登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 前端调用此接口获取需要签名的消息和 nonce，用于钱包登录
         * @summary 获取用于钱包签名的消息和 nonce
         * @param {ControllersGetNonceRequest} request 钱包地址信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authNoncePost: async (request: ControllersGetNonceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('authNoncePost', 'request', request)
            const localVarPath = `/auth/nonce`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前登录用户的详细个人信息
         * @summary 获取用户个人信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProfileGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 直接获取JWT token用于API测试，仅限开发环境使用
         * @summary 获取测试用token
         * @param {ControllersTestTokenRequest} request 钱包地址信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTestTokenPost: async (request: ControllersTestTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('authTestTokenPost', 'request', request)
            const localVarPath = `/auth/test-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 分页获取文章评论列表，支持按父评论筛选
         * @summary 获取评论列表
         * @param {number} articleId 文章ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {number} [parentId] 父评论ID，用于获取回复
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGet: async (articleId: number, page?: number, pageSize?: number, parentId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('commentsGet', 'articleId', articleId)
            const localVarPath = `/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (articleId !== undefined) {
                localVarQueryParameter['article_id'] = articleId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parent_id'] = parentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为指定评论点赞或取消点赞
         * @summary 点赞评论
         * @param {number} id 评论ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsIdLikePost: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commentsIdLikePost', 'id', id)
            const localVarPath = `/comments/{id}/like`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为文章创建新评论，支持回复其他评论
         * @summary 创建评论
         * @param {DtoCreateCommentRequest} request 创建评论信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsPost: async (request: DtoCreateCommentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('commentsPost', 'request', request)
            const localVarPath = `/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 检查服务器是否正常运行，返回系统状态信息和TraceID
         * @summary 健康检查
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 分页获取文章列表，支持排序和筛选
         * @summary 获取文章列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {ArticlesGetSortByEnum} [sortBy] 排序字段
         * @param {ArticlesGetSortOrderEnum} [sortOrder] 排序方向
         * @param {number} [userId] 用户ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articlesGet(page?: number, pageSize?: number, sortBy?: ArticlesGetSortByEnum, sortOrder?: ArticlesGetSortOrderEnum, userId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoArticleListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.articlesGet(page, pageSize, sortBy, sortOrder, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.articlesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 删除文章（逻辑删除）
         * @summary 删除文章
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articlesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.articlesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.articlesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据文章ID获取文章详细信息
         * @summary 获取文章详情
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articlesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoArticleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.articlesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.articlesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 给文章点赞
         * @summary 点赞文章
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articlesIdLikePost(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.articlesIdLikePost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.articlesIdLikePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 更新文章内容
         * @summary 更新文章
         * @param {number} id 文章ID
         * @param {DtoUpdateArticleRequest} request 更新文章信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articlesIdPut(id: number, request: DtoUpdateArticleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoArticleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.articlesIdPut(id, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.articlesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 取消文章点赞
         * @summary 取消点赞文章
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articlesIdUnlikeDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.articlesIdUnlikeDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.articlesIdUnlikeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 创建一篇新文章
         * @summary 创建文章
         * @param {DtoCreateArticleRequest} request 创建文章信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articlesPost(request: DtoCreateArticleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoArticleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.articlesPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.articlesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 使用钱包签名进行登录验证，验证成功后返回JWT令牌
         * @summary 钱包签名登录
         * @param {ControllersLoginRequest} request 登录信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(request: ControllersLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 用户登出，清除服务器端会话信息
         * @summary 用户登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 前端调用此接口获取需要签名的消息和 nonce，用于钱包登录
         * @summary 获取用于钱包签名的消息和 nonce
         * @param {ControllersGetNonceRequest} request 钱包地址信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authNoncePost(request: ControllersGetNonceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersGetNonceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authNoncePost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authNoncePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取当前登录用户的详细个人信息
         * @summary 获取用户个人信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProfileGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authProfileGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authProfileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 直接获取JWT token用于API测试，仅限开发环境使用
         * @summary 获取测试用token
         * @param {ControllersTestTokenRequest} request 钱包地址信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTestTokenPost(request: ControllersTestTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersTestTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authTestTokenPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authTestTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 分页获取文章评论列表，支持按父评论筛选
         * @summary 获取评论列表
         * @param {number} articleId 文章ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {number} [parentId] 父评论ID，用于获取回复
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGet(articleId: number, page?: number, pageSize?: number, parentId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoCommentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsGet(articleId, page, pageSize, parentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 为指定评论点赞或取消点赞
         * @summary 点赞评论
         * @param {number} id 评论ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsIdLikePost(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsIdLikePost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsIdLikePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 为文章创建新评论，支持回复其他评论
         * @summary 创建评论
         * @param {DtoCreateCommentRequest} request 创建评论信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsPost(request: DtoCreateCommentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 检查服务器是否正常运行，返回系统状态信息和TraceID
         * @summary 健康检查
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoutesHealthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 分页获取文章列表，支持排序和筛选
         * @summary 获取文章列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {ArticlesGetSortByEnum} [sortBy] 排序字段
         * @param {ArticlesGetSortOrderEnum} [sortOrder] 排序方向
         * @param {number} [userId] 用户ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesGet(page?: number, pageSize?: number, sortBy?: ArticlesGetSortByEnum, sortOrder?: ArticlesGetSortOrderEnum, userId?: number, options?: RawAxiosRequestConfig): AxiosPromise<DtoArticleListResponse> {
            return localVarFp.articlesGet(page, pageSize, sortBy, sortOrder, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除文章（逻辑删除）
         * @summary 删除文章
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.articlesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据文章ID获取文章详细信息
         * @summary 获取文章详情
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DtoArticleResponse> {
            return localVarFp.articlesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 给文章点赞
         * @summary 点赞文章
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesIdLikePost(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.articlesIdLikePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新文章内容
         * @summary 更新文章
         * @param {number} id 文章ID
         * @param {DtoUpdateArticleRequest} request 更新文章信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesIdPut(id: number, request: DtoUpdateArticleRequest, options?: RawAxiosRequestConfig): AxiosPromise<DtoArticleResponse> {
            return localVarFp.articlesIdPut(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 取消文章点赞
         * @summary 取消点赞文章
         * @param {number} id 文章ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesIdUnlikeDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.articlesIdUnlikeDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建一篇新文章
         * @summary 创建文章
         * @param {DtoCreateArticleRequest} request 创建文章信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articlesPost(request: DtoCreateArticleRequest, options?: RawAxiosRequestConfig): AxiosPromise<DtoArticleResponse> {
            return localVarFp.articlesPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 使用钱包签名进行登录验证，验证成功后返回JWT令牌
         * @summary 钱包签名登录
         * @param {ControllersLoginRequest} request 登录信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(request: ControllersLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<ControllersLoginResponse> {
            return localVarFp.authLoginPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 用户登出，清除服务器端会话信息
         * @summary 用户登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.authLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 前端调用此接口获取需要签名的消息和 nonce，用于钱包登录
         * @summary 获取用于钱包签名的消息和 nonce
         * @param {ControllersGetNonceRequest} request 钱包地址信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authNoncePost(request: ControllersGetNonceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ControllersGetNonceResponse> {
            return localVarFp.authNoncePost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前登录用户的详细个人信息
         * @summary 获取用户个人信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProfileGet(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.authProfileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 直接获取JWT token用于API测试，仅限开发环境使用
         * @summary 获取测试用token
         * @param {ControllersTestTokenRequest} request 钱包地址信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTestTokenPost(request: ControllersTestTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<ControllersTestTokenResponse> {
            return localVarFp.authTestTokenPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 分页获取文章评论列表，支持按父评论筛选
         * @summary 获取评论列表
         * @param {number} articleId 文章ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {number} [parentId] 父评论ID，用于获取回复
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGet(articleId: number, page?: number, pageSize?: number, parentId?: number, options?: RawAxiosRequestConfig): AxiosPromise<DtoCommentListResponse> {
            return localVarFp.commentsGet(articleId, page, pageSize, parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 为指定评论点赞或取消点赞
         * @summary 点赞评论
         * @param {number} id 评论ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsIdLikePost(id: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.commentsIdLikePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 为文章创建新评论，支持回复其他评论
         * @summary 创建评论
         * @param {DtoCreateCommentRequest} request 创建评论信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsPost(request: DtoCreateCommentRequest, options?: RawAxiosRequestConfig): AxiosPromise<DtoCommentResponse> {
            return localVarFp.commentsPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 检查服务器是否正常运行，返回系统状态信息和TraceID
         * @summary 健康检查
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: RawAxiosRequestConfig): AxiosPromise<RoutesHealthResponse> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 分页获取文章列表，支持排序和筛选
     * @summary 获取文章列表
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {ArticlesGetSortByEnum} [sortBy] 排序字段
     * @param {ArticlesGetSortOrderEnum} [sortOrder] 排序方向
     * @param {number} [userId] 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public articlesGet(page?: number, pageSize?: number, sortBy?: ArticlesGetSortByEnum, sortOrder?: ArticlesGetSortOrderEnum, userId?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).articlesGet(page, pageSize, sortBy, sortOrder, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除文章（逻辑删除）
     * @summary 删除文章
     * @param {number} id 文章ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public articlesIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).articlesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据文章ID获取文章详细信息
     * @summary 获取文章详情
     * @param {number} id 文章ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public articlesIdGet(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).articlesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 给文章点赞
     * @summary 点赞文章
     * @param {number} id 文章ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public articlesIdLikePost(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).articlesIdLikePost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新文章内容
     * @summary 更新文章
     * @param {number} id 文章ID
     * @param {DtoUpdateArticleRequest} request 更新文章信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public articlesIdPut(id: number, request: DtoUpdateArticleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).articlesIdPut(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 取消文章点赞
     * @summary 取消点赞文章
     * @param {number} id 文章ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public articlesIdUnlikeDelete(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).articlesIdUnlikeDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 创建一篇新文章
     * @summary 创建文章
     * @param {DtoCreateArticleRequest} request 创建文章信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public articlesPost(request: DtoCreateArticleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).articlesPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 使用钱包签名进行登录验证，验证成功后返回JWT令牌
     * @summary 钱包签名登录
     * @param {ControllersLoginRequest} request 登录信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLoginPost(request: ControllersLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLoginPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 用户登出，清除服务器端会话信息
     * @summary 用户登出
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLogoutPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 前端调用此接口获取需要签名的消息和 nonce，用于钱包登录
     * @summary 获取用于钱包签名的消息和 nonce
     * @param {ControllersGetNonceRequest} request 钱包地址信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authNoncePost(request: ControllersGetNonceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authNoncePost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前登录用户的详细个人信息
     * @summary 获取用户个人信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authProfileGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authProfileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 直接获取JWT token用于API测试，仅限开发环境使用
     * @summary 获取测试用token
     * @param {ControllersTestTokenRequest} request 钱包地址信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authTestTokenPost(request: ControllersTestTokenRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authTestTokenPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 分页获取文章评论列表，支持按父评论筛选
     * @summary 获取评论列表
     * @param {number} articleId 文章ID
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {number} [parentId] 父评论ID，用于获取回复
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsGet(articleId: number, page?: number, pageSize?: number, parentId?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsGet(articleId, page, pageSize, parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为指定评论点赞或取消点赞
     * @summary 点赞评论
     * @param {number} id 评论ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsIdLikePost(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsIdLikePost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为文章创建新评论，支持回复其他评论
     * @summary 创建评论
     * @param {DtoCreateCommentRequest} request 创建评论信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsPost(request: DtoCreateCommentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 检查服务器是否正常运行，返回系统状态信息和TraceID
     * @summary 健康检查
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ArticlesGetSortByEnum = {
    CreatedAt: 'created_at',
    LikeCount: 'like_count',
    ViewCount: 'view_count'
} as const;
export type ArticlesGetSortByEnum = typeof ArticlesGetSortByEnum[keyof typeof ArticlesGetSortByEnum];
/**
 * @export
 */
export const ArticlesGetSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ArticlesGetSortOrderEnum = typeof ArticlesGetSortOrderEnum[keyof typeof ArticlesGetSortOrderEnum];


