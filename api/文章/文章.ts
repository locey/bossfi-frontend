/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * BossFi Backend API
 * BossFi区块链后端API服务，支持钱包登录、用户管理、区块链数据同步等功能
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DeleteArticlesId200,
  DeleteArticlesId401,
  DeleteArticlesId404,
  DeleteArticlesId500,
  DeleteArticlesIdUnlike200,
  DeleteArticlesIdUnlike400,
  DeleteArticlesIdUnlike401,
  DeleteArticlesIdUnlike500,
  DtoArticleListResponse,
  DtoArticleResponse,
  DtoCreateArticleRequest,
  DtoUpdateArticleRequest,
  GetArticles400,
  GetArticles500,
  GetArticlesId404,
  GetArticlesId500,
  GetArticlesParams,
  PostArticles400,
  PostArticles401,
  PostArticles500,
  PostArticlesIdLike200,
  PostArticlesIdLike400,
  PostArticlesIdLike401,
  PostArticlesIdLike404,
  PostArticlesIdLike500,
  PutArticlesId400,
  PutArticlesId401,
  PutArticlesId404,
  PutArticlesId500
} from '.././model';

import { axiosInstance } from '../../utils/request';
import type { ErrorType } from '../../utils/request';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 分页获取文章列表，支持排序、分类筛选和关键字搜索
 * @summary 获取文章列表
 */
export const getArticles = (
    params?: GetArticlesParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DtoArticleListResponse>(
      {url: `/articles`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetArticlesQueryKey = (params?: GetArticlesParams,) => {
    return [`/articles`, ...(params ? [params]: [])] as const;
    }

    
export const getGetArticlesQueryOptions = <TData = Awaited<ReturnType<typeof getArticles>>, TError = ErrorType<GetArticles400 | GetArticles500>>(params?: GetArticlesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetArticlesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getArticles>>> = ({ signal }) => getArticles(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetArticlesQueryResult = NonNullable<Awaited<ReturnType<typeof getArticles>>>
export type GetArticlesQueryError = ErrorType<GetArticles400 | GetArticles500>


export function useGetArticles<TData = Awaited<ReturnType<typeof getArticles>>, TError = ErrorType<GetArticles400 | GetArticles500>>(
 params: undefined |  GetArticlesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArticles>>,
          TError,
          Awaited<ReturnType<typeof getArticles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArticles<TData = Awaited<ReturnType<typeof getArticles>>, TError = ErrorType<GetArticles400 | GetArticles500>>(
 params?: GetArticlesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArticles>>,
          TError,
          Awaited<ReturnType<typeof getArticles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArticles<TData = Awaited<ReturnType<typeof getArticles>>, TError = ErrorType<GetArticles400 | GetArticles500>>(
 params?: GetArticlesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 获取文章列表
 */

export function useGetArticles<TData = Awaited<ReturnType<typeof getArticles>>, TError = ErrorType<GetArticles400 | GetArticles500>>(
 params?: GetArticlesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetArticlesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 创建一篇新文章
 * @summary 创建文章
 */
export const postArticles = (
    dtoCreateArticleRequest: DtoCreateArticleRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DtoArticleResponse>(
      {url: `/articles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dtoCreateArticleRequest, signal
    },
      options);
    }
  


export const getPostArticlesMutationOptions = <TError = ErrorType<PostArticles400 | PostArticles401 | PostArticles500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postArticles>>, TError,{data: DtoCreateArticleRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postArticles>>, TError,{data: DtoCreateArticleRequest}, TContext> => {

const mutationKey = ['postArticles'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postArticles>>, {data: DtoCreateArticleRequest}> = (props) => {
          const {data} = props ?? {};

          return  postArticles(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostArticlesMutationResult = NonNullable<Awaited<ReturnType<typeof postArticles>>>
    export type PostArticlesMutationBody = DtoCreateArticleRequest
    export type PostArticlesMutationError = ErrorType<PostArticles400 | PostArticles401 | PostArticles500>

    /**
 * @summary 创建文章
 */
export const usePostArticles = <TError = ErrorType<PostArticles400 | PostArticles401 | PostArticles500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postArticles>>, TError,{data: DtoCreateArticleRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postArticles>>,
        TError,
        {data: DtoCreateArticleRequest},
        TContext
      > => {

      const mutationOptions = getPostArticlesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 根据文章ID获取文章详细信息
 * @summary 获取文章详情
 */
export const getArticlesId = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DtoArticleResponse>(
      {url: `/articles/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetArticlesIdQueryKey = (id: number,) => {
    return [`/articles/${id}`] as const;
    }

    
export const getGetArticlesIdQueryOptions = <TData = Awaited<ReturnType<typeof getArticlesId>>, TError = ErrorType<GetArticlesId404 | GetArticlesId500>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticlesId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetArticlesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getArticlesId>>> = ({ signal }) => getArticlesId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getArticlesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetArticlesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getArticlesId>>>
export type GetArticlesIdQueryError = ErrorType<GetArticlesId404 | GetArticlesId500>


export function useGetArticlesId<TData = Awaited<ReturnType<typeof getArticlesId>>, TError = ErrorType<GetArticlesId404 | GetArticlesId500>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticlesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArticlesId>>,
          TError,
          Awaited<ReturnType<typeof getArticlesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArticlesId<TData = Awaited<ReturnType<typeof getArticlesId>>, TError = ErrorType<GetArticlesId404 | GetArticlesId500>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticlesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArticlesId>>,
          TError,
          Awaited<ReturnType<typeof getArticlesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArticlesId<TData = Awaited<ReturnType<typeof getArticlesId>>, TError = ErrorType<GetArticlesId404 | GetArticlesId500>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticlesId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 获取文章详情
 */

export function useGetArticlesId<TData = Awaited<ReturnType<typeof getArticlesId>>, TError = ErrorType<GetArticlesId404 | GetArticlesId500>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArticlesId>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetArticlesIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 更新文章内容
 * @summary 更新文章
 */
export const putArticlesId = (
    id: number,
    dtoUpdateArticleRequest: DtoUpdateArticleRequest,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<DtoArticleResponse>(
      {url: `/articles/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: dtoUpdateArticleRequest
    },
      options);
    }
  


export const getPutArticlesIdMutationOptions = <TError = ErrorType<PutArticlesId400 | PutArticlesId401 | PutArticlesId404 | PutArticlesId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putArticlesId>>, TError,{id: number;data: DtoUpdateArticleRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putArticlesId>>, TError,{id: number;data: DtoUpdateArticleRequest}, TContext> => {

const mutationKey = ['putArticlesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putArticlesId>>, {id: number;data: DtoUpdateArticleRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putArticlesId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutArticlesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putArticlesId>>>
    export type PutArticlesIdMutationBody = DtoUpdateArticleRequest
    export type PutArticlesIdMutationError = ErrorType<PutArticlesId400 | PutArticlesId401 | PutArticlesId404 | PutArticlesId500>

    /**
 * @summary 更新文章
 */
export const usePutArticlesId = <TError = ErrorType<PutArticlesId400 | PutArticlesId401 | PutArticlesId404 | PutArticlesId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putArticlesId>>, TError,{id: number;data: DtoUpdateArticleRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putArticlesId>>,
        TError,
        {id: number;data: DtoUpdateArticleRequest},
        TContext
      > => {

      const mutationOptions = getPutArticlesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 删除文章（逻辑删除）
 * @summary 删除文章
 */
export const deleteArticlesId = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<DeleteArticlesId200>(
      {url: `/articles/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteArticlesIdMutationOptions = <TError = ErrorType<DeleteArticlesId401 | DeleteArticlesId404 | DeleteArticlesId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArticlesId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteArticlesId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteArticlesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArticlesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteArticlesId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteArticlesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArticlesId>>>
    
    export type DeleteArticlesIdMutationError = ErrorType<DeleteArticlesId401 | DeleteArticlesId404 | DeleteArticlesId500>

    /**
 * @summary 删除文章
 */
export const useDeleteArticlesId = <TError = ErrorType<DeleteArticlesId401 | DeleteArticlesId404 | DeleteArticlesId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArticlesId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteArticlesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteArticlesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 给文章点赞
 * @summary 点赞文章
 */
export const postArticlesIdLike = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<PostArticlesIdLike200>(
      {url: `/articles/${id}/like`, method: 'POST', signal
    },
      options);
    }
  


export const getPostArticlesIdLikeMutationOptions = <TError = ErrorType<PostArticlesIdLike400 | PostArticlesIdLike401 | PostArticlesIdLike404 | PostArticlesIdLike500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postArticlesIdLike>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postArticlesIdLike>>, TError,{id: number}, TContext> => {

const mutationKey = ['postArticlesIdLike'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postArticlesIdLike>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postArticlesIdLike(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostArticlesIdLikeMutationResult = NonNullable<Awaited<ReturnType<typeof postArticlesIdLike>>>
    
    export type PostArticlesIdLikeMutationError = ErrorType<PostArticlesIdLike400 | PostArticlesIdLike401 | PostArticlesIdLike404 | PostArticlesIdLike500>

    /**
 * @summary 点赞文章
 */
export const usePostArticlesIdLike = <TError = ErrorType<PostArticlesIdLike400 | PostArticlesIdLike401 | PostArticlesIdLike404 | PostArticlesIdLike500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postArticlesIdLike>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postArticlesIdLike>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostArticlesIdLikeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 取消文章点赞
 * @summary 取消点赞文章
 */
export const deleteArticlesIdUnlike = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<DeleteArticlesIdUnlike200>(
      {url: `/articles/${id}/unlike`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteArticlesIdUnlikeMutationOptions = <TError = ErrorType<DeleteArticlesIdUnlike400 | DeleteArticlesIdUnlike401 | DeleteArticlesIdUnlike500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArticlesIdUnlike>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteArticlesIdUnlike>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteArticlesIdUnlike'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArticlesIdUnlike>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteArticlesIdUnlike(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteArticlesIdUnlikeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArticlesIdUnlike>>>
    
    export type DeleteArticlesIdUnlikeMutationError = ErrorType<DeleteArticlesIdUnlike400 | DeleteArticlesIdUnlike401 | DeleteArticlesIdUnlike500>

    /**
 * @summary 取消点赞文章
 */
export const useDeleteArticlesIdUnlike = <TError = ErrorType<DeleteArticlesIdUnlike400 | DeleteArticlesIdUnlike401 | DeleteArticlesIdUnlike500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArticlesIdUnlike>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteArticlesIdUnlike>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteArticlesIdUnlikeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    