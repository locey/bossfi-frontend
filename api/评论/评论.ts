/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * BossFi Backend API
 * BossFi区块链后端API服务，支持钱包登录、用户管理、区块链数据同步等功能
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DtoCommentListResponse,
  DtoCommentResponse,
  DtoCreateCommentRequest,
  DtoUserCommentListResponse,
  GetComments400,
  GetComments500,
  GetCommentsParams,
  GetUserComments400,
  GetUserComments401,
  GetUserComments500,
  GetUserCommentsParams,
  PostComments400,
  PostComments401,
  PostComments500,
  PostCommentsIdLike200,
  PostCommentsIdLike400,
  PostCommentsIdLike401,
  PostCommentsIdLike500
} from '.././model';

import { axiosInstance } from '../../utils/request';
import type { ErrorType } from '../../utils/request';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 分页获取文章评论列表，支持按父评论筛选
 * @summary 获取评论列表
 */
export const getComments = (
    params: GetCommentsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DtoCommentListResponse>(
      {url: `/comments`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCommentsQueryKey = (params: GetCommentsParams,) => {
    return [`/comments`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCommentsQueryOptions = <TData = Awaited<ReturnType<typeof getComments>>, TError = ErrorType<GetComments400 | GetComments500>>(params: GetCommentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommentsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getComments>>> = ({ signal }) => getComments(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommentsQueryResult = NonNullable<Awaited<ReturnType<typeof getComments>>>
export type GetCommentsQueryError = ErrorType<GetComments400 | GetComments500>


export function useGetComments<TData = Awaited<ReturnType<typeof getComments>>, TError = ErrorType<GetComments400 | GetComments500>>(
 params: GetCommentsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComments>>,
          TError,
          Awaited<ReturnType<typeof getComments>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetComments<TData = Awaited<ReturnType<typeof getComments>>, TError = ErrorType<GetComments400 | GetComments500>>(
 params: GetCommentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComments>>,
          TError,
          Awaited<ReturnType<typeof getComments>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetComments<TData = Awaited<ReturnType<typeof getComments>>, TError = ErrorType<GetComments400 | GetComments500>>(
 params: GetCommentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 获取评论列表
 */

export function useGetComments<TData = Awaited<ReturnType<typeof getComments>>, TError = ErrorType<GetComments400 | GetComments500>>(
 params: GetCommentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getComments>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCommentsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 为文章创建新评论，支持回复其他评论
 * @summary 创建评论
 */
export const postComments = (
    dtoCreateCommentRequest: DtoCreateCommentRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DtoCommentResponse>(
      {url: `/comments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: dtoCreateCommentRequest, signal
    },
      options);
    }
  


export const getPostCommentsMutationOptions = <TError = ErrorType<PostComments400 | PostComments401 | PostComments500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postComments>>, TError,{data: DtoCreateCommentRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postComments>>, TError,{data: DtoCreateCommentRequest}, TContext> => {

const mutationKey = ['postComments'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postComments>>, {data: DtoCreateCommentRequest}> = (props) => {
          const {data} = props ?? {};

          return  postComments(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCommentsMutationResult = NonNullable<Awaited<ReturnType<typeof postComments>>>
    export type PostCommentsMutationBody = DtoCreateCommentRequest
    export type PostCommentsMutationError = ErrorType<PostComments400 | PostComments401 | PostComments500>

    /**
 * @summary 创建评论
 */
export const usePostComments = <TError = ErrorType<PostComments400 | PostComments401 | PostComments500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postComments>>, TError,{data: DtoCreateCommentRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postComments>>,
        TError,
        {data: DtoCreateCommentRequest},
        TContext
      > => {

      const mutationOptions = getPostCommentsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 为指定评论点赞或取消点赞
 * @summary 点赞评论
 */
export const postCommentsIdLike = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<PostCommentsIdLike200>(
      {url: `/comments/${id}/like`, method: 'POST', signal
    },
      options);
    }
  


export const getPostCommentsIdLikeMutationOptions = <TError = ErrorType<PostCommentsIdLike400 | PostCommentsIdLike401 | PostCommentsIdLike500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCommentsIdLike>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postCommentsIdLike>>, TError,{id: number}, TContext> => {

const mutationKey = ['postCommentsIdLike'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCommentsIdLike>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postCommentsIdLike(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCommentsIdLikeMutationResult = NonNullable<Awaited<ReturnType<typeof postCommentsIdLike>>>
    
    export type PostCommentsIdLikeMutationError = ErrorType<PostCommentsIdLike400 | PostCommentsIdLike401 | PostCommentsIdLike500>

    /**
 * @summary 点赞评论
 */
export const usePostCommentsIdLike = <TError = ErrorType<PostCommentsIdLike400 | PostCommentsIdLike401 | PostCommentsIdLike500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCommentsIdLike>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postCommentsIdLike>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPostCommentsIdLikeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 分页获取当前登录用户的所有评论，包含文章信息和父评论信息
 * @summary 获取登录用户的所有评论
 */
export const getUserComments = (
    params?: GetUserCommentsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<DtoUserCommentListResponse>(
      {url: `/user/comments`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetUserCommentsQueryKey = (params?: GetUserCommentsParams,) => {
    return [`/user/comments`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserCommentsQueryOptions = <TData = Awaited<ReturnType<typeof getUserComments>>, TError = ErrorType<GetUserComments400 | GetUserComments401 | GetUserComments500>>(params?: GetUserCommentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserComments>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCommentsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserComments>>> = ({ signal }) => getUserComments(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserComments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserCommentsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserComments>>>
export type GetUserCommentsQueryError = ErrorType<GetUserComments400 | GetUserComments401 | GetUserComments500>


export function useGetUserComments<TData = Awaited<ReturnType<typeof getUserComments>>, TError = ErrorType<GetUserComments400 | GetUserComments401 | GetUserComments500>>(
 params: undefined |  GetUserCommentsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserComments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserComments>>,
          TError,
          Awaited<ReturnType<typeof getUserComments>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserComments<TData = Awaited<ReturnType<typeof getUserComments>>, TError = ErrorType<GetUserComments400 | GetUserComments401 | GetUserComments500>>(
 params?: GetUserCommentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserComments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserComments>>,
          TError,
          Awaited<ReturnType<typeof getUserComments>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserComments<TData = Awaited<ReturnType<typeof getUserComments>>, TError = ErrorType<GetUserComments400 | GetUserComments401 | GetUserComments500>>(
 params?: GetUserCommentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserComments>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 获取登录用户的所有评论
 */

export function useGetUserComments<TData = Awaited<ReturnType<typeof getUserComments>>, TError = ErrorType<GetUserComments400 | GetUserComments401 | GetUserComments500>>(
 params?: GetUserCommentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserComments>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserCommentsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



